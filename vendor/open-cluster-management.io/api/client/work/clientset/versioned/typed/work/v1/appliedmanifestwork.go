// Code generated by client-gen. DO NOT EDIT.

package v1

import (
	context "context"

	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	gentype "k8s.io/client-go/gentype"
	scheme "open-cluster-management.io/api/client/work/clientset/versioned/scheme"
	workv1 "open-cluster-management.io/api/work/v1"
)

// AppliedManifestWorksGetter has a method to return a AppliedManifestWorkInterface.
// A group's client should implement this interface.
type AppliedManifestWorksGetter interface {
	AppliedManifestWorks() AppliedManifestWorkInterface
}

// AppliedManifestWorkInterface has methods to work with AppliedManifestWork resources.
type AppliedManifestWorkInterface interface {
	Create(ctx context.Context, appliedManifestWork *workv1.AppliedManifestWork, opts metav1.CreateOptions) (*workv1.AppliedManifestWork, error)
	Update(ctx context.Context, appliedManifestWork *workv1.AppliedManifestWork, opts metav1.UpdateOptions) (*workv1.AppliedManifestWork, error)
	// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().
	UpdateStatus(ctx context.Context, appliedManifestWork *workv1.AppliedManifestWork, opts metav1.UpdateOptions) (*workv1.AppliedManifestWork, error)
	Delete(ctx context.Context, name string, opts metav1.DeleteOptions) error
	DeleteCollection(ctx context.Context, opts metav1.DeleteOptions, listOpts metav1.ListOptions) error
	Get(ctx context.Context, name string, opts metav1.GetOptions) (*workv1.AppliedManifestWork, error)
	List(ctx context.Context, opts metav1.ListOptions) (*workv1.AppliedManifestWorkList, error)
	Watch(ctx context.Context, opts metav1.ListOptions) (watch.Interface, error)
	Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts metav1.PatchOptions, subresources ...string) (result *workv1.AppliedManifestWork, err error)
	AppliedManifestWorkExpansion
}

// appliedManifestWorks implements AppliedManifestWorkInterface
type appliedManifestWorks struct {
	*gentype.ClientWithList[*workv1.AppliedManifestWork, *workv1.AppliedManifestWorkList]
}

// newAppliedManifestWorks returns a AppliedManifestWorks
func newAppliedManifestWorks(c *WorkV1Client) *appliedManifestWorks {
	return &appliedManifestWorks{
		gentype.NewClientWithList[*workv1.AppliedManifestWork, *workv1.AppliedManifestWorkList](
			"appliedmanifestworks",
			c.RESTClient(),
			scheme.ParameterCodec,
			"",
			func() *workv1.AppliedManifestWork { return &workv1.AppliedManifestWork{} },
			func() *workv1.AppliedManifestWorkList { return &workv1.AppliedManifestWorkList{} },
		),
	}
}

// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	gentype "k8s.io/client-go/gentype"
	workv1alpha1 "open-cluster-management.io/api/client/work/clientset/versioned/typed/work/v1alpha1"
	v1alpha1 "open-cluster-management.io/api/work/v1alpha1"
)

// fakeManifestWorkReplicaSets implements ManifestWorkReplicaSetInterface
type fakeManifestWorkReplicaSets struct {
	*gentype.FakeClientWithList[*v1alpha1.ManifestWorkReplicaSet, *v1alpha1.ManifestWorkReplicaSetList]
	Fake *FakeWorkV1alpha1
}

func newFakeManifestWorkReplicaSets(fake *FakeWorkV1alpha1, namespace string) workv1alpha1.ManifestWorkReplicaSetInterface {
	return &fakeManifestWorkReplicaSets{
		gentype.NewFakeClientWithList[*v1alpha1.ManifestWorkReplicaSet, *v1alpha1.ManifestWorkReplicaSetList](
			fake.Fake,
			namespace,
			v1alpha1.SchemeGroupVersion.WithResource("manifestworkreplicasets"),
			v1alpha1.SchemeGroupVersion.WithKind("ManifestWorkReplicaSet"),
			func() *v1alpha1.ManifestWorkReplicaSet { return &v1alpha1.ManifestWorkReplicaSet{} },
			func() *v1alpha1.ManifestWorkReplicaSetList { return &v1alpha1.ManifestWorkReplicaSetList{} },
			func(dst, src *v1alpha1.ManifestWorkReplicaSetList) { dst.ListMeta = src.ListMeta },
			func(list *v1alpha1.ManifestWorkReplicaSetList) []*v1alpha1.ManifestWorkReplicaSet {
				return gentype.ToPointerSlice(list.Items)
			},
			func(list *v1alpha1.ManifestWorkReplicaSetList, items []*v1alpha1.ManifestWorkReplicaSet) {
				list.Items = gentype.FromPointerSlice(items)
			},
		),
		fake,
	}
}

// Code generated by client-gen. DO NOT EDIT.

package v1beta2

import (
	context "context"

	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	gentype "k8s.io/client-go/gentype"
	scheme "open-cluster-management.io/api/client/cluster/clientset/versioned/scheme"
	clusterv1beta2 "open-cluster-management.io/api/cluster/v1beta2"
)

// ManagedClusterSetsGetter has a method to return a ManagedClusterSetInterface.
// A group's client should implement this interface.
type ManagedClusterSetsGetter interface {
	ManagedClusterSets() ManagedClusterSetInterface
}

// ManagedClusterSetInterface has methods to work with ManagedClusterSet resources.
type ManagedClusterSetInterface interface {
	Create(ctx context.Context, managedClusterSet *clusterv1beta2.ManagedClusterSet, opts v1.CreateOptions) (*clusterv1beta2.ManagedClusterSet, error)
	Update(ctx context.Context, managedClusterSet *clusterv1beta2.ManagedClusterSet, opts v1.UpdateOptions) (*clusterv1beta2.ManagedClusterSet, error)
	// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().
	UpdateStatus(ctx context.Context, managedClusterSet *clusterv1beta2.ManagedClusterSet, opts v1.UpdateOptions) (*clusterv1beta2.ManagedClusterSet, error)
	Delete(ctx context.Context, name string, opts v1.DeleteOptions) error
	DeleteCollection(ctx context.Context, opts v1.DeleteOptions, listOpts v1.ListOptions) error
	Get(ctx context.Context, name string, opts v1.GetOptions) (*clusterv1beta2.ManagedClusterSet, error)
	List(ctx context.Context, opts v1.ListOptions) (*clusterv1beta2.ManagedClusterSetList, error)
	Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error)
	Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts v1.PatchOptions, subresources ...string) (result *clusterv1beta2.ManagedClusterSet, err error)
	ManagedClusterSetExpansion
}

// managedClusterSets implements ManagedClusterSetInterface
type managedClusterSets struct {
	*gentype.ClientWithList[*clusterv1beta2.ManagedClusterSet, *clusterv1beta2.ManagedClusterSetList]
}

// newManagedClusterSets returns a ManagedClusterSets
func newManagedClusterSets(c *ClusterV1beta2Client) *managedClusterSets {
	return &managedClusterSets{
		gentype.NewClientWithList[*clusterv1beta2.ManagedClusterSet, *clusterv1beta2.ManagedClusterSetList](
			"managedclustersets",
			c.RESTClient(),
			scheme.ParameterCodec,
			"",
			func() *clusterv1beta2.ManagedClusterSet { return &clusterv1beta2.ManagedClusterSet{} },
			func() *clusterv1beta2.ManagedClusterSetList { return &clusterv1beta2.ManagedClusterSetList{} },
		),
	}
}

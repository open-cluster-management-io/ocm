// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	gentype "k8s.io/client-go/gentype"
	clusterv1beta2 "open-cluster-management.io/api/client/cluster/clientset/versioned/typed/cluster/v1beta2"
	v1beta2 "open-cluster-management.io/api/cluster/v1beta2"
)

// fakeManagedClusterSets implements ManagedClusterSetInterface
type fakeManagedClusterSets struct {
	*gentype.FakeClientWithList[*v1beta2.ManagedClusterSet, *v1beta2.ManagedClusterSetList]
	Fake *FakeClusterV1beta2
}

func newFakeManagedClusterSets(fake *FakeClusterV1beta2) clusterv1beta2.ManagedClusterSetInterface {
	return &fakeManagedClusterSets{
		gentype.NewFakeClientWithList[*v1beta2.ManagedClusterSet, *v1beta2.ManagedClusterSetList](
			fake.Fake,
			"",
			v1beta2.SchemeGroupVersion.WithResource("managedclustersets"),
			v1beta2.SchemeGroupVersion.WithKind("ManagedClusterSet"),
			func() *v1beta2.ManagedClusterSet { return &v1beta2.ManagedClusterSet{} },
			func() *v1beta2.ManagedClusterSetList { return &v1beta2.ManagedClusterSetList{} },
			func(dst, src *v1beta2.ManagedClusterSetList) { dst.ListMeta = src.ListMeta },
			func(list *v1beta2.ManagedClusterSetList) []*v1beta2.ManagedClusterSet {
				return gentype.ToPointerSlice(list.Items)
			},
			func(list *v1beta2.ManagedClusterSetList, items []*v1beta2.ManagedClusterSet) {
				list.Items = gentype.FromPointerSlice(items)
			},
		),
		fake,
	}
}

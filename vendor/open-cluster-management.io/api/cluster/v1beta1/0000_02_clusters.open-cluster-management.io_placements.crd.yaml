apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  name: placements.cluster.open-cluster-management.io
spec:
  group: cluster.open-cluster-management.io
  names:
    kind: Placement
    listKind: PlacementList
    plural: placements
    singular: placement
  preserveUnknownFields: false
  scope: Namespaced
  versions:
  - additionalPrinterColumns:
    - jsonPath: .status.conditions[?(@.type=="PlacementSatisfied")].status
      name: Succeeded
      type: string
    - jsonPath: .status.conditions[?(@.type=="PlacementSatisfied")].reason
      name: Reason
      type: string
    - jsonPath: .status.numberOfSelectedClusters
      name: SelectedClusters
      type: integer
    name: v1beta1
    schema:
      openAPIV3Schema:
        description: "Placement defines a rule to select a set of ManagedClusters
          from the ManagedClusterSets bound to the placement namespace. \n Here is
          how the placement policy combines with other selection methods to determine
          a matching list of ManagedClusters: 1. Kubernetes clusters are registered
          with hub as cluster-scoped ManagedClusters; 2. ManagedClusters are organized
          into cluster-scoped ManagedClusterSets; 3. ManagedClusterSets are bound
          to workload namespaces; 4. Namespace-scoped Placements specify a slice of
          ManagedClusterSets which select a working set of potential ManagedClusters;
          5. Then Placements subselect from that working set using label/claim selection.
          \n No ManagedCluster will be selected if no ManagedClusterSet is bound to
          the placement namespace. User is able to bind a ManagedClusterSet to a namespace
          by creating a ManagedClusterSetBinding in that namespace if they have a
          RBAC rule to CREATE on the virtual subresource of `managedclustersets/bind`.
          \n A slice of PlacementDecisions with label cluster.open-cluster-management.io/placement={placement
          name} will be created to represent the ManagedClusters selected by this
          placement. \n If a ManagedCluster is selected and added into the PlacementDecisions,
          other components may apply workload on it; once it is removed from the PlacementDecisions,
          the workload applied on this ManagedCluster should be evicted accordingly."
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: Spec defines the attributes of Placement.
            properties:
              clusterSets:
                description: ClusterSets represent the ManagedClusterSets from which
                  the ManagedClusters are selected. If the slice is empty, ManagedClusters
                  will be selected from the ManagedClusterSets bound to the placement
                  namespace, otherwise ManagedClusters will be selected from the intersection
                  of this slice and the ManagedClusterSets bound to the placement
                  namespace.
                items:
                  type: string
                type: array
              decisionStrategy:
                description: DecisionStrategy divide the created placement decision
                  to groups and define number of clusters per decision group.
                properties:
                  groupStrategy:
                    description: GroupStrategy define strategies to divide selected
                      clusters to decision groups.
                    properties:
                      clustersPerDecisionGroup:
                        anyOf:
                        - type: integer
                        - type: string
                        default: 100%
                        description: "ClustersPerDecisionGroup is a specific number
                          or percentage of the total selected clusters. The specific
                          number will divide the placementDecisions to decisionGroups
                          each group has max number of clusters equal to that specific
                          number. The percentage will divide the placementDecisions
                          to decisionGroups each group has max number of clusters
                          based on the total num of selected clusters and percentage.
                          ex; for a total 100 clusters selected, ClustersPerDecisionGroup
                          equal to 20% will divide the placement decision to 5 groups
                          each group should have 20 clusters. Default is having all
                          clusters in a single group. \n The predefined decisionGroups
                          is expected to be a subset of the selected clusters and
                          the number of items in each group SHOULD be less than ClustersPerDecisionGroup.
                          Once the number of items exceeds the ClustersPerDecisionGroup,
                          the decisionGroups will also be be divided into multiple
                          decisionGroups with same GroupName but different GroupIndex."
                        pattern: ^((100|[1-9][0-9]{0,1})%|[1-9][0-9]*)$
                        x-kubernetes-int-or-string: true
                      decisionGroups:
                        description: DecisionGroups represents a list of predefined
                          groups to put decision results. Decision groups will be
                          constructed based on the DecisionGroups field at first.
                          The clusters not included in the DecisionGroups will be
                          divided to other decision groups afterwards. Each decision
                          group should not have the number of clusters larger than
                          the ClustersPerDecisionGroup.
                        items:
                          description: DecisionGroup define a subset of clusters that
                            will be added to placementDecisions with groupName label.
                          properties:
                            groupClusterSelector:
                              description: LabelSelector to select clusters subset
                                by label.
                              properties:
                                claimSelector:
                                  description: ClaimSelector represents a selector
                                    of ManagedClusters by clusterClaims in status
                                  properties:
                                    matchExpressions:
                                      description: matchExpressions is a list of cluster
                                        claim selector requirements. The requirements
                                        are ANDed.
                                      items:
                                        description: A label selector requirement
                                          is a selector that contains values, a key,
                                          and an operator that relates the key and
                                          values.
                                        properties:
                                          key:
                                            description: key is the label key that
                                              the selector applies to.
                                            type: string
                                          operator:
                                            description: operator represents a key's
                                              relationship to a set of values. Valid
                                              operators are In, NotIn, Exists and
                                              DoesNotExist.
                                            type: string
                                          values:
                                            description: values is an array of string
                                              values. If the operator is In or NotIn,
                                              the values array must be non-empty.
                                              If the operator is Exists or DoesNotExist,
                                              the values array must be empty. This
                                              array is replaced during a strategic
                                              merge patch.
                                            items:
                                              type: string
                                            type: array
                                        required:
                                        - key
                                        - operator
                                        type: object
                                      type: array
                                  type: object
                                labelSelector:
                                  description: LabelSelector represents a selector
                                    of ManagedClusters by label
                                  properties:
                                    matchExpressions:
                                      description: matchExpressions is a list of label
                                        selector requirements. The requirements are
                                        ANDed.
                                      items:
                                        description: A label selector requirement
                                          is a selector that contains values, a key,
                                          and an operator that relates the key and
                                          values.
                                        properties:
                                          key:
                                            description: key is the label key that
                                              the selector applies to.
                                            type: string
                                          operator:
                                            description: operator represents a key's
                                              relationship to a set of values. Valid
                                              operators are In, NotIn, Exists and
                                              DoesNotExist.
                                            type: string
                                          values:
                                            description: values is an array of string
                                              values. If the operator is In or NotIn,
                                              the values array must be non-empty.
                                              If the operator is Exists or DoesNotExist,
                                              the values array must be empty. This
                                              array is replaced during a strategic
                                              merge patch.
                                            items:
                                              type: string
                                            type: array
                                        required:
                                        - key
                                        - operator
                                        type: object
                                      type: array
                                    matchLabels:
                                      additionalProperties:
                                        type: string
                                      description: matchLabels is a map of {key,value}
                                        pairs. A single {key,value} in the matchLabels
                                        map is equivalent to an element of matchExpressions,
                                        whose key field is "key", the operator is
                                        "In", and the values array contains only "value".
                                        The requirements are ANDed.
                                      type: object
                                  type: object
                                  x-kubernetes-map-type: atomic
                              type: object
                            groupName:
                              description: Group name to be added as label value to
                                the created placement Decisions labels with label
                                key cluster.open-cluster-management.io/decision-group-name
                              pattern: ^[a-zA-Z0-9][-A-Za-z0-9_.]{0,61}[a-zA-Z0-9]$
                              type: string
                          required:
                          - groupClusterSelector
                          - groupName
                          type: object
                        type: array
                    type: object
                type: object
              numberOfClusters:
                description: NumberOfClusters represents the desired number of ManagedClusters
                  to be selected which meet the placement requirements. 1) If not
                  specified, all ManagedClusters which meet the placement requirements
                  (including ClusterSets, and Predicates) will be selected; 2) Otherwise
                  if the nubmer of ManagedClusters meet the placement requirements
                  is larger than NumberOfClusters, a random subset with desired number
                  of ManagedClusters will be selected; 3) If the nubmer of ManagedClusters
                  meet the placement requirements is equal to NumberOfClusters, all
                  of them will be selected; 4) If the nubmer of ManagedClusters meet
                  the placement requirements is less than NumberOfClusters, all of
                  them will be selected, and the status of condition `PlacementConditionSatisfied`
                  will be set to false;
                format: int32
                type: integer
              predicates:
                description: Predicates represent a slice of predicates to select
                  ManagedClusters. The predicates are ORed.
                items:
                  description: ClusterPredicate represents a predicate to select ManagedClusters.
                  properties:
                    requiredClusterSelector:
                      description: RequiredClusterSelector represents a selector of
                        ManagedClusters by label and claim. If specified, 1) Any ManagedCluster,
                        which does not match the selector, should not be selected
                        by this ClusterPredicate; 2) If a selected ManagedCluster
                        (of this ClusterPredicate) ceases to match the selector (e.g.
                        due to an update) of any ClusterPredicate, it will be eventually
                        removed from the placement decisions; 3) If a ManagedCluster
                        (not selected previously) starts to match the selector, it
                        will either be selected or at least has a chance to be selected
                        (when NumberOfClusters is specified);
                      properties:
                        claimSelector:
                          description: ClaimSelector represents a selector of ManagedClusters
                            by clusterClaims in status
                          properties:
                            matchExpressions:
                              description: matchExpressions is a list of cluster claim
                                selector requirements. The requirements are ANDed.
                              items:
                                description: A label selector requirement is a selector
                                  that contains values, a key, and an operator that
                                  relates the key and values.
                                properties:
                                  key:
                                    description: key is the label key that the selector
                                      applies to.
                                    type: string
                                  operator:
                                    description: operator represents a key's relationship
                                      to a set of values. Valid operators are In,
                                      NotIn, Exists and DoesNotExist.
                                    type: string
                                  values:
                                    description: values is an array of string values.
                                      If the operator is In or NotIn, the values array
                                      must be non-empty. If the operator is Exists
                                      or DoesNotExist, the values array must be empty.
                                      This array is replaced during a strategic merge
                                      patch.
                                    items:
                                      type: string
                                    type: array
                                required:
                                - key
                                - operator
                                type: object
                              type: array
                          type: object
                        labelSelector:
                          description: LabelSelector represents a selector of ManagedClusters
                            by label
                          properties:
                            matchExpressions:
                              description: matchExpressions is a list of label selector
                                requirements. The requirements are ANDed.
                              items:
                                description: A label selector requirement is a selector
                                  that contains values, a key, and an operator that
                                  relates the key and values.
                                properties:
                                  key:
                                    description: key is the label key that the selector
                                      applies to.
                                    type: string
                                  operator:
                                    description: operator represents a key's relationship
                                      to a set of values. Valid operators are In,
                                      NotIn, Exists and DoesNotExist.
                                    type: string
                                  values:
                                    description: values is an array of string values.
                                      If the operator is In or NotIn, the values array
                                      must be non-empty. If the operator is Exists
                                      or DoesNotExist, the values array must be empty.
                                      This array is replaced during a strategic merge
                                      patch.
                                    items:
                                      type: string
                                    type: array
                                required:
                                - key
                                - operator
                                type: object
                              type: array
                            matchLabels:
                              additionalProperties:
                                type: string
                              description: matchLabels is a map of {key,value} pairs.
                                A single {key,value} in the matchLabels map is equivalent
                                to an element of matchExpressions, whose key field
                                is "key", the operator is "In", and the values array
                                contains only "value". The requirements are ANDed.
                              type: object
                          type: object
                          x-kubernetes-map-type: atomic
                      type: object
                  type: object
                type: array
              prioritizerPolicy:
                description: PrioritizerPolicy defines the policy of the prioritizers.
                  If this field is unset, then default prioritizer mode and configurations
                  are used. Referring to PrioritizerPolicy to see more description
                  about Mode and Configurations.
                properties:
                  configurations:
                    items:
                      description: PrioritizerConfig represents the configuration
                        of prioritizer
                      properties:
                        scoreCoordinate:
                          description: ScoreCoordinate represents the configuration
                            of the prioritizer and score source.
                          properties:
                            addOn:
                              description: When type is "AddOn", AddOn defines the
                                resource name and score name.
                              properties:
                                resourceName:
                                  description: ResourceName defines the resource name
                                    of the AddOnPlacementScore. The placement prioritizer
                                    selects AddOnPlacementScore CR by this name.
                                  type: string
                                scoreName:
                                  description: ScoreName defines the score name inside
                                    AddOnPlacementScore. AddOnPlacementScore contains
                                    a list of score name and score value, ScoreName
                                    specify the score to be used by the prioritizer.
                                  type: string
                              required:
                              - resourceName
                              - scoreName
                              type: object
                            builtIn:
                              description: 'BuiltIn defines the name of a BuiltIn
                                prioritizer. Below are the valid BuiltIn prioritizer
                                names. 1) Balance: balance the decisions among the
                                clusters. 2) Steady: ensure the existing decision
                                is stabilized. 3) ResourceAllocatableCPU & ResourceAllocatableMemory:
                                sort clusters based on the allocatable. 4) Spread:
                                spread the workload evenly to topologies.'
                              type: string
                            type:
                              default: BuiltIn
                              description: Type defines the type of the prioritizer
                                score. Type is either "BuiltIn", "AddOn" or "", where
                                "" is "BuiltIn" by default. When the type is "BuiltIn",
                                need to specify a BuiltIn prioritizer name in BuiltIn.
                                When the type is "AddOn", need to configure the score
                                source in AddOn.
                              enum:
                              - BuiltIn
                              - AddOn
                              type: string
                          required:
                          - type
                          type: object
                        weight:
                          default: 1
                          description: Weight defines the weight of the prioritizer
                            score. The value must be ranged in [-10,10]. Each prioritizer
                            will calculate an integer score of a cluster in the range
                            of [-100, 100]. The final score of a cluster will be sum(weight
                            * prioritizer_score). A higher weight indicates that the
                            prioritizer weights more in the cluster selection, while
                            0 weight indicates that the prioritizer is disabled. A
                            negative weight indicates wants to select the last ones.
                          format: int32
                          maximum: 10
                          minimum: -10
                          type: integer
                      required:
                      - scoreCoordinate
                      type: object
                    type: array
                  mode:
                    default: Additive
                    description: Mode is either Exact, Additive, "" where "" is Additive
                      by default. In Additive mode, any prioritizer not explicitly
                      enumerated is enabled in its default Configurations, in which
                      Steady and Balance prioritizers have the weight of 1 while other
                      prioritizers have the weight of 0. Additive doesn't require
                      configuring all prioritizers. The default Configurations may
                      change in the future, and additional prioritization will happen.
                      In Exact mode, any prioritizer not explicitly enumerated is
                      weighted as zero. Exact requires knowing the full set of prioritizers
                      you want, but avoids behavior changes between releases.
                    type: string
                type: object
              spreadPolicy:
                description: SpreadPolicy defines how placement decisions should be
                  distributed among a set of ManagedClusters.
                properties:
                  spreadConstraints:
                    description: SpreadConstraints defines how the placement decision
                      should be distributed among a set of ManagedClusters. The importance
                      of the SpreadConstraintsTerms follows the natural order of their
                      index in the slice. The scheduler first consider SpreadConstraintsTerms
                      with smaller index then those with larger index to distribute
                      the placement decision.
                    items:
                      description: SpreadConstraintsTerm defines a terminology to
                        spread placement decisions.
                      properties:
                        maxSkew:
                          default: 1
                          description: MaxSkew represents the degree to which the
                            workload may be unevenly distributed. Skew is the maximum
                            difference between the number of selected ManagedClusters
                            in a topology and the global minimum. The global minimum
                            is the minimum number of selected ManagedClusters for
                            the topologies within the same TopologyKey. The minimum
                            possible value of MaxSkew is 1, and the default value
                            is 1.
                          format: int32
                          minimum: 1
                          type: integer
                        topologyKey:
                          description: TopologyKey is either a label key or a cluster
                            claim name of ManagedClusters.
                          maxLength: 316
                          pattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9]$
                          type: string
                        topologyKeyType:
                          description: TopologyKeyType indicates the type of TopologyKey.
                            It could be Label or Claim.
                          enum:
                          - Label
                          - Claim
                          type: string
                        whenUnsatisfiable:
                          default: ScheduleAnyway
                          description: WhenUnsatisfiable represents the action of
                            the scheduler when MaxSkew cannot be satisfied. It could
                            be DoNotSchedule or ScheduleAnyway. The default value
                            is ScheduleAnyway. DoNotSchedule instructs the scheduler
                            not to schedule more ManagedClusters when MaxSkew is not
                            satisfied. ScheduleAnyway instructs the scheduler to keep
                            scheduling even if MaxSkew is not satisfied.
                          enum:
                          - DoNotSchedule
                          - ScheduleAnyway
                          type: string
                      required:
                      - topologyKey
                      - topologyKeyType
                      type: object
                    maxItems: 8
                    type: array
                type: object
              tolerations:
                description: Tolerations are applied to placements, and allow (but
                  do not require) the managed clusters with certain taints to be selected
                  by placements with matching tolerations.
                items:
                  description: Toleration represents the toleration object that can
                    be attached to a placement. The placement this Toleration is attached
                    to tolerates any taint that matches the triple <key,value,effect>
                    using the matching operator <operator>.
                  properties:
                    effect:
                      description: Effect indicates the taint effect to match. Empty
                        means match all taint effects. When specified, allowed values
                        are NoSelect, PreferNoSelect and NoSelectIfNew.
                      enum:
                      - NoSelect
                      - PreferNoSelect
                      - NoSelectIfNew
                      type: string
                    key:
                      description: Key is the taint key that the toleration applies
                        to. Empty means match all taint keys. If the key is empty,
                        operator must be Exists; this combination means to match all
                        values and all keys.
                      maxLength: 316
                      pattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$
                      type: string
                    operator:
                      default: Equal
                      description: Operator represents a key's relationship to the
                        value. Valid operators are Exists and Equal. Defaults to Equal.
                        Exists is equivalent to wildcard for value, so that a placement
                        can tolerate all taints of a particular category.
                      type: string
                    tolerationSeconds:
                      description: TolerationSeconds represents the period of time
                        the toleration (which must be of effect NoSelect/PreferNoSelect,
                        otherwise this field is ignored) tolerates the taint. The
                        default value is nil, which indicates it tolerates the taint
                        forever. The start time of counting the TolerationSeconds
                        should be the TimeAdded in Taint, not the cluster scheduled
                        time or TolerationSeconds added time.
                      format: int64
                      type: integer
                    value:
                      description: Value is the taint value the toleration matches
                        to. If the operator is Exists, the value should be empty,
                        otherwise just a regular string.
                      maxLength: 1024
                      type: string
                  type: object
                type: array
            type: object
          status:
            description: Status represents the current status of the Placement
            properties:
              conditions:
                description: Conditions contains the different condition status for
                  this Placement.
                items:
                  description: "Condition contains details for one aspect of the current
                    state of this API Resource. --- This struct is intended for direct
                    use as an array at the field path .status.conditions.  For example,
                    \n type FooStatus struct{ // Represents the observations of a
                    foo's current state. // Known .status.conditions.type are: \"Available\",
                    \"Progressing\", and \"Degraded\" // +patchMergeKey=type // +patchStrategy=merge
                    // +listType=map // +listMapKey=type Conditions []metav1.Condition
                    `json:\"conditions,omitempty\" patchStrategy:\"merge\" patchMergeKey:\"type\"
                    protobuf:\"bytes,1,rep,name=conditions\"` \n // other fields }"
                  properties:
                    lastTransitionTime:
                      description: lastTransitionTime is the last time the condition
                        transitioned from one status to another. This should be when
                        the underlying condition changed.  If that is not known, then
                        using the time when the API field changed is acceptable.
                      format: date-time
                      type: string
                    message:
                      description: message is a human readable message indicating
                        details about the transition. This may be an empty string.
                      maxLength: 32768
                      type: string
                    observedGeneration:
                      description: observedGeneration represents the .metadata.generation
                        that the condition was set based upon. For instance, if .metadata.generation
                        is currently 12, but the .status.conditions[x].observedGeneration
                        is 9, the condition is out of date with respect to the current
                        state of the instance.
                      format: int64
                      minimum: 0
                      type: integer
                    reason:
                      description: reason contains a programmatic identifier indicating
                        the reason for the condition's last transition. Producers
                        of specific condition types may define expected values and
                        meanings for this field, and whether the values are considered
                        a guaranteed API. The value should be a CamelCase string.
                        This field may not be empty.
                      maxLength: 1024
                      minLength: 1
                      pattern: ^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$
                      type: string
                    status:
                      description: status of the condition, one of True, False, Unknown.
                      enum:
                      - "True"
                      - "False"
                      - Unknown
                      type: string
                    type:
                      description: type of condition in CamelCase or in foo.example.com/CamelCase.
                        --- Many .condition.type values are consistent across resources
                        like Available, but because arbitrary conditions can be useful
                        (see .node.status.conditions), the ability to deconflict is
                        important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
                      maxLength: 316
                      pattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$
                      type: string
                  required:
                  - lastTransitionTime
                  - message
                  - reason
                  - status
                  - type
                  type: object
                type: array
              decisionGroups:
                description: List of decision groups determined by the placement and
                  DecisionStrategy.
                items:
                  description: Present decision groups status based on the DecisionStrategy
                    definition.
                  properties:
                    clusterCount:
                      default: 0
                      description: Total number of clusters in the decision group.
                        Clusters count is equal or less than the clusterPerDecisionGroups
                        defined in the decision strategy.
                      format: int32
                      type: integer
                    decisionGroupIndex:
                      description: Present the decision group index. If there is no
                        decision strategy defined all placement decisions will be
                        in group index 0
                      format: int32
                      type: integer
                    decisionGroupName:
                      description: Decision group name that is defined in the DecisionStrategy's
                        DecisionGroup.
                      type: string
                    decisions:
                      description: List of placement decisions names associated with
                        the decision group
                      items:
                        type: string
                      type: array
                  type: object
                type: array
              numberOfSelectedClusters:
                description: NumberOfSelectedClusters represents the number of selected
                  ManagedClusters
                format: int32
                type: integer
            type: object
        required:
        - spec
        type: object
    served: true
    storage: true
    subresources:
      status: {}
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []

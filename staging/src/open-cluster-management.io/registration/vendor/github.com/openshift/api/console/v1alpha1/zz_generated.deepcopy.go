//go:build !ignore_autogenerated
// +build !ignore_autogenerated

// Code generated by deepcopy-gen. DO NOT EDIT.

package v1alpha1

import (
	runtime "k8s.io/apimachinery/pkg/runtime"
)

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ConsolePlugin) DeepCopyInto(out *ConsolePlugin) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ConsolePlugin.
func (in *ConsolePlugin) DeepCopy() *ConsolePlugin {
	if in == nil {
		return nil
	}
	out := new(ConsolePlugin)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *ConsolePlugin) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ConsolePluginList) DeepCopyInto(out *ConsolePluginList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]ConsolePlugin, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ConsolePluginList.
func (in *ConsolePluginList) DeepCopy() *ConsolePluginList {
	if in == nil {
		return nil
	}
	out := new(ConsolePluginList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *ConsolePluginList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ConsolePluginProxy) DeepCopyInto(out *ConsolePluginProxy) {
	*out = *in
	out.Service = in.Service
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ConsolePluginProxy.
func (in *ConsolePluginProxy) DeepCopy() *ConsolePluginProxy {
	if in == nil {
		return nil
	}
	out := new(ConsolePluginProxy)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ConsolePluginProxyServiceConfig) DeepCopyInto(out *ConsolePluginProxyServiceConfig) {
	*out = *in
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ConsolePluginProxyServiceConfig.
func (in *ConsolePluginProxyServiceConfig) DeepCopy() *ConsolePluginProxyServiceConfig {
	if in == nil {
		return nil
	}
	out := new(ConsolePluginProxyServiceConfig)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ConsolePluginService) DeepCopyInto(out *ConsolePluginService) {
	*out = *in
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ConsolePluginService.
func (in *ConsolePluginService) DeepCopy() *ConsolePluginService {
	if in == nil {
		return nil
	}
	out := new(ConsolePluginService)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ConsolePluginSpec) DeepCopyInto(out *ConsolePluginSpec) {
	*out = *in
	out.Service = in.Service
	if in.Proxy != nil {
		in, out := &in.Proxy, &out.Proxy
		*out = make([]ConsolePluginProxy, len(*in))
		copy(*out, *in)
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ConsolePluginSpec.
func (in *ConsolePluginSpec) DeepCopy() *ConsolePluginSpec {
	if in == nil {
		return nil
	}
	out := new(ConsolePluginSpec)
	in.DeepCopyInto(out)
	return out
}
